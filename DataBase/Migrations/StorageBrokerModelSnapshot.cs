// <auto-generated />
using System;
using E_Commerce.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Migrations
{
    [DbContext(typeof(StorageBroker))]
    partial class StorageBrokerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("E_Commerce.Entities.Classes.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassCondition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ProducedTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductIdId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShoppingCardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserIdId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductIdId");

                    b.HasIndex("ShoppingCardId");

                    b.HasIndex("UserIdId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ProducedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.ShoppingCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserIdId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserIdId");

                    b.ToTable("ShoppingCards");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.ShoppingCardHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShoppingCardHistoriesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCardHistoriesId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCardHistories");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClassCondition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.Order", b =>
                {
                    b.HasOne("E_Commerce.Entities.Classes.Product", "ProductId")
                        .WithMany()
                        .HasForeignKey("ProductIdId");

                    b.HasOne("E_Commerce.Entities.Classes.ShoppingCard", null)
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingCardId");

                    b.HasOne("E_Commerce.Entities.Classes.User", "UserId")
                        .WithMany()
                        .HasForeignKey("UserIdId");

                    b.Navigation("ProductId");

                    b.Navigation("UserId");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.ShoppingCard", b =>
                {
                    b.HasOne("E_Commerce.Entities.Classes.User", "UserId")
                        .WithMany()
                        .HasForeignKey("UserIdId");

                    b.Navigation("UserId");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.ShoppingCardHistory", b =>
                {
                    b.HasOne("E_Commerce.Entities.Classes.ShoppingCardHistory", "ShoppingCardHistories")
                        .WithMany()
                        .HasForeignKey("ShoppingCardHistoriesId");

                    b.HasOne("E_Commerce.Entities.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ShoppingCardHistories");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Entities.Classes.ShoppingCard", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
